// https://gist.github.com/eaziz4/0f26a622878cd177a4991c190e62c5de
duckdb::DuckDB db(nullptr);
duckdb::Connection con(db);
std::string query = "SELECT * FROM read_parquet('" + filePath + "');";
auto result = con.Query(query);

std::unordered_map<std::string, int> columnMappings;
for (int i = 0; i < result->ColumnCount(); ++i) {
    columnMappings[result->ColumnName(i)] = i;
}
const auto field1Index = columnMappings["field1"];
const auto field2Index = columnMappings["field2"];
const auto field3Index = columnMappings["field3"];
const auto field4Index = columnMappings["field4"];
const auto field5Index = columnMappings["field5"];

std::vector<CustomObject> objects;
objects.reserve(result->RowCount());

while (auto chunk = result->Fetch()) {
  auto &field1Col = chunk->data[field1Index];
  auto &field2Col = chunk->data[field2Index];
  auto &field3Col = chunk->data[field3Index];
  auto &field4Col = chunk->data[field4Index];
  auto &field5Col = chunk->data[field5Index];
  
  auto field1Vec = duckdb::FlatVector::GetData<int64_t>(bet_id_col);
  auto field2Vec = duckdb::FlatVector::GetData<double>(devig_id_col);
  auto field3Vec = duckdb::FlatVector::GetData<bool>(market_id_col);
  auto field4Vec = duckdb::FlatVector::GetData<duckdb::string_t>(book_col);
  auto field5Vec = duckdb::FlatVector::GetData<duckdb::string_t>(bet_name_col);

  for (size_t row_idx = 0; row_idx < chunk->size(); ++row_idx) {
      objects.emplace_back(
          field1Vec[row_idx], field2Vec[row_idx], field3Vec[row_idx], field4Vec[row_idx].GetString(),
          field5Vec[row_idx].GetString()
      );
  }
}

// from https://gist.github.com/eaziz4/3099386874d3b73c344a1aec2b7c0b48
duckdb::DuckDB db(nullptr);
duckdb::Connection con(db);
std::string query = "SELECT * FROM read_parquet('" + filePath + "');";
auto result = con.Query(query);
/* takes around .15 seconds to fetch 225,000 rows across 50 parquet files */

std::vector<CustomObject> objects{};
objects.reserve(result->RowCount());
std::unordered_map<std::string, int> columnMappings;
for (int i = 0; i < result->ColumnCount(); ++i) {
    columnMappings[result->ColumnName(i)] = i;
}
const auto field1Index = columnMappings["field1"];
const auto field2Index = columnMappings["field2"];
const auto field3Index = columnMappings["field3"];
const auto field4Index = columnMappings["field4"];
const auto field5Index = columnMappings["field5"];

for (idx_t row_idx = 0; row_idx < result->RowCount(); ++row_idx) {
    int64_t field1 = result->GetValue(field1Index, row_idx).GetValue<int64_t>();
    auto field2 = result->GetValue(field2Index, row_idx).GetValue<std::string>();
    auto field3 = result->GetValue(field3Index, row_idx).GetValue<bool>();
    auto field4 = result->GetValue(field4Index, row_idx).GetValue<double>();
    auto field5 = result->GetValue(field5Index, row_idx).GetValue<int64_t>();
    objects.emplace_back(field1, field2, field3, field4);
}```
/* takes around .75 seconds to fill my vector */
